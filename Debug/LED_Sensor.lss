
LED_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000009f0  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d41  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001970  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	b2 d0       	rcall	.+356    	; 0x198 <main>
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <UART_Init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "UART.h"
#include <avr/pgmspace.h>

void UART_Init(unsigned int ubrr) {
  38:	cf 93       	push	r28
  3a:	df 93       	push	r29
  3c:	00 d0       	rcall	.+0      	; 0x3e <__SP_H__>
  3e:	cd b7       	in	r28, 0x3d	; 61
  40:	de b7       	in	r29, 0x3e	; 62
  42:	9a 83       	std	Y+2, r25	; 0x02
  44:	89 83       	std	Y+1, r24	; 0x01

	/* Set baud rate */
	UBRRH = (unsigned char) (ubrr >> 8);
  46:	80 e4       	ldi	r24, 0x40	; 64
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	29 81       	ldd	r18, Y+1	; 0x01
  4c:	3a 81       	ldd	r19, Y+2	; 0x02
  4e:	23 2f       	mov	r18, r19
  50:	33 27       	eor	r19, r19
  52:	fc 01       	movw	r30, r24
  54:	20 83       	st	Z, r18
	UBRRL = (unsigned char) ubrr;
  56:	89 e2       	ldi	r24, 0x29	; 41
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	29 81       	ldd	r18, Y+1	; 0x01
  5c:	fc 01       	movw	r30, r24
  5e:	20 83       	st	Z, r18

	/* Enable receiver and transmitter */
	UCSRB = 1 << RXEN | 1 << TXEN | 0 << RXCIE | 0 << TXCIE | 0 << UDRIE;
  60:	8a e2       	ldi	r24, 0x2A	; 42
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	28 e1       	ldi	r18, 0x18	; 24
  66:	fc 01       	movw	r30, r24
  68:	20 83       	st	Z, r18

	/* Set frame format: 1 stop bit, 8data */
	UCSRC = (1 << URSEL) | (0 << USBS) | (3 << UCSZ0);
  6a:	80 e4       	ldi	r24, 0x40	; 64
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	26 e8       	ldi	r18, 0x86	; 134
  70:	fc 01       	movw	r30, r24
  72:	20 83       	st	Z, r18
}
  74:	0f 90       	pop	r0
  76:	0f 90       	pop	r0
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	08 95       	ret

0000007e <UART_TxChar>:

void UART_TxChar(unsigned char data) {	// Передача из МК в провод
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	1f 92       	push	r1
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while (!( UCSRA & (1 << UDRE)))
  8a:	00 00       	nop
  8c:	8b e2       	ldi	r24, 0x2B	; 43
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	fc 01       	movw	r30, r24
  92:	80 81       	ld	r24, Z
  94:	88 2f       	mov	r24, r24
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	80 72       	andi	r24, 0x20	; 32
  9a:	99 27       	eor	r25, r25
  9c:	00 97       	sbiw	r24, 0x00	; 0
  9e:	b1 f3       	breq	.-20     	; 0x8c <UART_TxChar+0xe>
		;

	/* Put data into buffer, sends the data */
	UDR = (unsigned int) data;
  a0:	8c e2       	ldi	r24, 0x2C	; 44
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	29 81       	ldd	r18, Y+1	; 0x01
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18

}
  aa:	0f 90       	pop	r0
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <UART_TxString>:

void UART_TxString(unsigned char * data) {
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	00 d0       	rcall	.+0      	; 0xb8 <UART_TxString+0x6>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
	while (*data) {
  c0:	0a c0       	rjmp	.+20     	; 0xd6 <UART_TxString+0x24>
		UART_TxChar(*data);
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	d9 df       	rcall	.-78     	; 0x7e <UART_TxChar>
		data++;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	89 83       	std	Y+1, r24	; 0x01
	UDR = (unsigned int) data;

}

void UART_TxString(unsigned char * data) {
	while (*data) {
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	81 f7       	brne	.-32     	; 0xc2 <UART_TxString+0x10>
		UART_TxChar(*data);
		data++;
	}
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <UART_TxStringFlash>:

void UART_TxStringFlash(const unsigned char *data) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2e 97       	sbiw	r28, 0x0e	; 14
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	9e 87       	std	Y+14, r25	; 0x0e
 102:	8d 87       	std	Y+13, r24	; 0x0d
	while (pgm_read_byte(data)) {
 104:	33 c0       	rjmp	.+102    	; 0x16c <UART_TxStringFlash+0x80>
		if (pgm_read_byte(data) >= 0xd0) {
 106:	8d 85       	ldd	r24, Y+13	; 0x0d
 108:	9e 85       	ldd	r25, Y+14	; 0x0e
 10a:	9d 83       	std	Y+5, r25	; 0x05
 10c:	8c 83       	std	Y+4, r24	; 0x04
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	9d 81       	ldd	r25, Y+5	; 0x05
 112:	fc 01       	movw	r30, r24
 114:	84 91       	lpm	r24, Z
 116:	8e 83       	std	Y+6, r24	; 0x06
 118:	8e 81       	ldd	r24, Y+6	; 0x06
 11a:	80 3d       	cpi	r24, 0xD0	; 208
 11c:	b8 f0       	brcs	.+46     	; 0x14c <UART_TxStringFlash+0x60>
			data++;
 11e:	8d 85       	ldd	r24, Y+13	; 0x0d
 120:	9e 85       	ldd	r25, Y+14	; 0x0e
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	9e 87       	std	Y+14, r25	; 0x0e
 126:	8d 87       	std	Y+13, r24	; 0x0d
			UART_TxChar(pgm_read_byte(data) + 0x30);
 128:	8d 85       	ldd	r24, Y+13	; 0x0d
 12a:	9e 85       	ldd	r25, Y+14	; 0x0e
 12c:	98 87       	std	Y+8, r25	; 0x08
 12e:	8f 83       	std	Y+7, r24	; 0x07
 130:	8f 81       	ldd	r24, Y+7	; 0x07
 132:	98 85       	ldd	r25, Y+8	; 0x08
 134:	fc 01       	movw	r30, r24
 136:	84 91       	lpm	r24, Z
 138:	89 87       	std	Y+9, r24	; 0x09
 13a:	89 85       	ldd	r24, Y+9	; 0x09
 13c:	80 5d       	subi	r24, 0xD0	; 208
 13e:	9f df       	rcall	.-194    	; 0x7e <UART_TxChar>
			data++;
 140:	8d 85       	ldd	r24, Y+13	; 0x0d
 142:	9e 85       	ldd	r25, Y+14	; 0x0e
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	9e 87       	std	Y+14, r25	; 0x0e
 148:	8d 87       	std	Y+13, r24	; 0x0d
 14a:	10 c0       	rjmp	.+32     	; 0x16c <UART_TxStringFlash+0x80>
		}
		else {
			UART_TxChar(pgm_read_byte(data));
 14c:	8d 85       	ldd	r24, Y+13	; 0x0d
 14e:	9e 85       	ldd	r25, Y+14	; 0x0e
 150:	9b 87       	std	Y+11, r25	; 0x0b
 152:	8a 87       	std	Y+10, r24	; 0x0a
 154:	8a 85       	ldd	r24, Y+10	; 0x0a
 156:	9b 85       	ldd	r25, Y+11	; 0x0b
 158:	fc 01       	movw	r30, r24
 15a:	84 91       	lpm	r24, Z
 15c:	8c 87       	std	Y+12, r24	; 0x0c
 15e:	8c 85       	ldd	r24, Y+12	; 0x0c
 160:	8e df       	rcall	.-228    	; 0x7e <UART_TxChar>
			data++;
 162:	8d 85       	ldd	r24, Y+13	; 0x0d
 164:	9e 85       	ldd	r25, Y+14	; 0x0e
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	9e 87       	std	Y+14, r25	; 0x0e
 16a:	8d 87       	std	Y+13, r24	; 0x0d
		data++;
	}
}

void UART_TxStringFlash(const unsigned char *data) {
	while (pgm_read_byte(data)) {
 16c:	8d 85       	ldd	r24, Y+13	; 0x0d
 16e:	9e 85       	ldd	r25, Y+14	; 0x0e
 170:	9a 83       	std	Y+2, r25	; 0x02
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	fc 01       	movw	r30, r24
 17a:	84 91       	lpm	r24, Z
 17c:	8b 83       	std	Y+3, r24	; 0x03
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	88 23       	and	r24, r24
 182:	09 f0       	breq	.+2      	; 0x186 <UART_TxStringFlash+0x9a>
 184:	c0 cf       	rjmp	.-128    	; 0x106 <UART_TxStringFlash+0x1a>
		else {
			UART_TxChar(pgm_read_byte(data));
			data++;
		}
	}
}
 186:	2e 96       	adiw	r28, 0x0e	; 14
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <main>:
#include "UART.h"
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62

	UART_Init(MYUBRR);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	49 df       	rcall	.-366    	; 0x38 <UART_Init>

	return 0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
